[nonterminal]
Program
Compound_stmt
Local_declarations
Statement_list
Statement
Var_declaration
Type_specifer
Expression_stmt
Expression
Var
Simple_expression
Additive_expression
Addop
Term
Mulop
Factor
If_stmt
While_stmt
[terminal]
main
(
)
{
}
identity
int
char
void
+
-
*
/
%
=
num
if
else
while
$
[start]
G => Program  ;
Program => main ( ) Compound_stmt  ;
Compound_stmt => { Local_declarations Statement_list }  ;
Local_declarations => Local_declarations Var_declaration ;
Local_declarations => Var_declaration  ;
Var_declaration => Type_specifer identity $ ;
Type_specifer => int ;
Type_specifer => char ;
Type_specifer => void ;
Statement_list => Statement_list Statement  ;
Statement_list => Statement ;
Statement => Expression_stmt ;
Expression_stmt => Expression $ ;
Expression => Var = Expression ;
Expression => Simple_expression ;
Simple_expression => Additive_expression ;
Additive_expression => Additive_expression Addop Term ;
Additive_expression => Term ;
Addop => + ;
Addop => - ;
Term => Term Mulop Factor ;
Term => Factor ;
Mulop => * ;
Mulop => / ;
Mulop => % ;
Factor => ( Expression ) ;
Factor => Var ;
Factor => num ;
Var => identity ;
Statement => If_stmt ;
If_stmt => if ( Expression ) { Statement } ;
If_stmt => if ( Expression ) { Statement } else { Statement } ;
Statement => While_stmt ;
While_stmt => while ( Expression ) { Statement } ;
